generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProcessingType {
  SQUARE
  BEND
  STRAIGHT
}

enum UserRole {
  ADMIN
  USER
}

enum Unit {
  KG
  MM
  PIECE
}

model Commodity {
  name                String               @id @unique
  unit                Unit
  restocks            Restock[]
  orderElements       OrderElement[]
  weightToLenghtRatio WeightToLenghtRatio?
}

model WeightToLenghtRatio {
  commodityId        String    @id
  commodity          Commodity @relation(fields: [commodityId], references: [name])
  weightPerMilimeter Decimal
}

model Restock {
  id              Int             @id @default(autoincrement())
  date            DateTime        @default(now())
  commodityId     String
  commodity       Commodity       @relation(fields: [commodityId], references: [name])
  quantity        Decimal
  supplierName    String?
  invoiceNumber   String?
  unitPrice       Decimal
  authorId        String
  author          User            @relation(fields: [authorId], references: [id])
  stockDispatches StockDispatch[]
}

model Order {
  id            Int            @id @default(autoincrement())
  date          DateTime       @default(now())
  authorId      String
  author        User           @relation(fields: [authorId], references: [id])
  note          String?
  orderElements OrderElement[]
  invoices      Invoice?
}

model OrderElement {
  id              Int             @id @default(autoincrement())
  orderId         Int
  order           Order           @relation(fields: [orderId], references: [id])
  commodityId     String
  commodity       Commodity       @relation(fields: [commodityId], references: [name])
  processingNote  String?
  processingType  ProcessingType
  unitLength      Decimal
  numberOfUnits   Decimal
  unitPrice       Decimal
  ticketNumber    String?
  stockDispatches StockDispatch[]
}

model Invoice {
  invoiceNumber String   @id
  date          DateTime @default(now())
  orderId       Int      @unique
  order         Order    @relation(fields: [orderId], references: [id])
}

model StockDispatch {
  id             Int          @id @default(autoincrement())
  date           DateTime     @default(now())
  orderElementId Int
  orderElement   OrderElement @relation(fields: [orderElementId], references: [id])
  quantity       Decimal
  restockId      Int
  restockSource  Restock      @relation(fields: [restockId], references: [id])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String
  role          String    @default("USER")
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  restocks Restock[]
  orders   Order[]
}
